pops.trim=sapply(pops, function(x){ str_split(x,"[|]")[[1]][2] } )
pops.trim=str_replace_all(pops.trim, "Spring[/]", "")
pops.trim=str_replace_all(pops.trim, "Rivers", "R.")
pops.trim=str_replace_all(pops.trim, "River", "R.")
pops.trim=str_replace_all(pops.trim, "Creeks", "Cr.")
pops.trim=str_replace_all(pops.trim, "Creek", "Cr.")
pops.trim=str_replace(pops.trim, "Tributaries", "Tribs.")
run.trim=sapply(pops, function(x){ str_split(x,"[|]")[[1]][3] } )
run.trim=str_replace(run.trim, "Fall-run", "FR")
run.trim=str_replace(run.trim, "Spring[/]Summer-run", "SSR")
run.trim=str_replace(run.trim, "Summer[/]Winter-run", "SWR")
run.trim=str_replace(run.trim, "Winter-run", "WR")
run.trim=str_replace(run.trim, "Early-run", "ER")
run.trim=str_replace(run.trim, "Early-late-run", "ELR")
run.trim=str_replace(run.trim, "Spring-run", "SpR")
run.trim=str_replace(run.trim, "Summer-run", "SuR")
run.trim=str_replace(run.trim, "Late-run", "LR")
run.trim=str_replace(run.trim, "Late fall", "LFR")
run.trim=str_replace(run.trim, "NA", "")
pops.trim = paste(pops.trim, run.trim)
pops.trim=str_replace(pops.trim, "Spring SSR", "SSR")
pops.trim=str_replace(pops.trim, "Washington", "WA")
pops.trim=str_replace(pops.trim, "Oregon", "OR")
pops.trim=str_replace(pops.trim, "North Fork", "NF")
pops.trim=str_replace(pops.trim, "North", "N.")
pops.trim=str_replace(pops.trim, "South Fork", "SF")
pops.trim=str_replace(pops.trim, "Middle Fork", "MF")
pops.trim=str_replace(pops.trim, "East Fork", "EF")
pops.trim=str_replace(pops.trim, "West Fork", "WF")
pops.trim=str_replace(pops.trim, "South", "S.")
pops.trim=str_replace(pops.trim, "Upper", "Up.")
pops.trim=str_replace(pops.trim, "Lower", "Low.")
pops.trim=str_replace(pops.trim, ", and ", "/")
pops.trim=str_replace(pops.trim, " and ", "/")
pops.trim=str_replace(pops.trim, ", ", "/")
pops.trim=str_trim(pops.trim)
pops.trim
}
#custom fun to fix PS Chinook name ordering
sort.PSChinook=function(x){
pop.ord=c(
"North Fork Nooksack",
"South Fork Nooksack",
"Elwha",
"Dungeness",
"Skokomish",
"Mid-Hood Canal",
"Skykomish",
"Snoqualmie",
"North Fork Stillaguamish",
"South Fork Stillaguamish",
"Upper Skagit",
"Lower Skagit",
"Upper Sauk",
"Lower Sauk",
"Suiattle",
"Cascade",
"Sammamish",
"Cedar",
"Green",
"Puyallup",
"White",
"Nisqually")
if(length(x)!=length(pop.ord)) stop("Something wrong with sort names for PS Chinook")
ord=1:length(pop.ord)
for(i in 1:length(pop.ord)) ord[i]=which(str_detect(x,pop.ord[i]))
return(ord)
}
# This uses information across the populations in an ESU to estimate process variance,
# non-process variance (residuals about the black lines), covarianc in process errors
# (good and bad year correlation) but allows each population to have a different trend.
#R=diag and equal; U=unequal; Q=equalvarcov
#AIC selects U=equal over this
modn=which(unlist(lapply(fits.total[[1]],function(x){ identical(x$model$Z,"identity") & identical(x$model$U,"unequal") & identical(x$model$R,"diagonal and equal") & identical(x$model$Q,"equalvarcov") })))
for(this.esu in 1:length(fits)){
esuname=names(fits)[this.esu]
ifit.total = fits.total[[esuname]][[modn]]$fit
ifit.fracwild = fits.total[[esuname]][["fwlogitfit"]]
esuname=names(fits)[this.esu]
#Set up the min and max years
years = as.numeric(colnames(ifit.total$model$data))
if(is.null(min.year)) min.year = years[1]
if(min.year<years[1]) min.year = years[1]
if(is.null(max.year)) max.year = max(years)
if(max.year>max(years)) max.year = max(years)
#Figure out the names of the populations to plot
#it's the row in total.fit where there are enough data points for the min to max year range
min.data.points = 5
pops = rownames(ifit.total$model$data)
mpg=metadat$PopGroup[metadat$name%in%pops]
pops.to.plot =  pops[
apply(ifit.total$model$data[,which(years==min.year):which(years==max.year),drop=FALSE],1,
function(x){sum(!is.na(x))>=min.data.points})]
#mpg.to.plot used for mgp col in tables
mpg.to.plot = sort(metadat$PopGroup[metadat$name%in%pops.to.plot])
mpg.to.plot = clean.mpg(mpg.to.plot)
pops.to.plot = pops.to.plot[order( metadat$PopGroup[metadat$name%in%pops.to.plot] )]
if(esuname=="Salmon, Chinook (Puget Sound ESU)"){
ord=sort.PSChinook(pops.to.plot)
pops.to.plot=pops.to.plot[ord]
mpg.to.plot=mpg.to.plot[ord]
}
pops.to.plot.wild =  rownames(ifit.fracwild$fracwild.raw)[
apply(ifit.fracwild$fracwild.raw[,which(years==min.year):which(years==max.year),drop=FALSE],1,
function(x){sum(!is.na(x))>=min.data.points})]
#mpg.to.plot.wild used for mgp col in tables
mpg.to.plot.wild = sort(metadat$PopGroup[metadat$name%in%pops.to.plot.wild])
mpg.to.plot.wild = clean.mpg(mpg.to.plot.wild)
pops.to.plot.wild = pops.to.plot.wild[order( metadat$PopGroup[metadat$name%in%pops.to.plot.wild] )]
if(esuname=="Salmon, Chinook (Puget Sound ESU)"){
ord=sort.PSChinook(pops.to.plot.wild)
pops.to.plot.wild=pops.to.plot.wild[ord]
mpg.to.plot.wild=mpg.to.plot.wild[ord]
}
outputfile=str_replace_all(esuname,"/","-")
outputfile=paste("figures/",outputfile,".pdf",sep="")
render("esu_report.Rmd", render.type, output_options=list(fig_caption=TRUE))
file.rename("esu_report.pdf", outputfile)
outnames=paste("tempfigures/ESU_figures/",str_replace_all(esuname,"/","-"),"-",
c("summary_fig.pdf","fracwild_fig.pdf","main_fig.pdf","productivity_fig.pdf"), sep="")
innames = paste("tempfigures/",c("summary_fig-1.pdf","fracwild_fig-1.pdf","main_fig-1.pdf","productivity_fig-1.pdf"),sep="")
tabnames=c("trend_15_table", "geomean_wild_table", "geomean_total_table", "fracwild_table")
tabinnames=paste("tempfigures/wrapper_", tabnames, ".tex", sep="")
taboutnames.tmp=paste("wrapper_", tabnames, ".pdf", sep="")
taboutnames=paste("tempfigures/ESU_figures/",str_replace_all(esuname,"/","-"),"-",
tabnames, ".pdf", sep="")
for(i in 1:4){
file.rename(innames[i], outnames[i])
texi2pdf(tabinnames[i], clean=TRUE)
file.rename(taboutnames.tmp[i], taboutnames[i])
}
}
install.packages("XLConnect")
inputfile="PNW_Listed_Salmonids_2016.csv"
library(stringr)
str_sub(inputfile,-3)
dir()
inst/appdir/demofiles/PNW_Listed_Salmonids_2016.csv
inputfile="inst/appdir/demofiles/PNW_Listed_Salmonids_2016.csv"
library(XLConnect)
install.packages("xlsx")
library(xls)
library(xlsx)
library(gdata)
install.packages("gdata")
library(gdata)
df <- read.xls(inputfile, sheet=1, perl="C:/Perl/bin/perl.exe")
df <- read.xls(inputfile, sheet=1, perl="C:Program Files (x86)/Perl/bin/perl.exe")
df <- read.xls(inputfile, sheet=1, perl="C:/Program Files (x86)/Perl/bin/perl.exe")
inputfile
dir("inst/appdir/demofiles")
inputfile="inst/appdir/demofiles/PNW_Listed_Salmonids_2016.xlsx"
df <- read.xls(inputfile, sheet=1, perl="C:/Program Files (x86)/Perl/bin/perl.exe")
head(df)
df <- read.xls(inputfile, sheet=1, perl="C:/Program Files (x86)/Perl/bin/perl.exe")
head(df)
Sys.getenv("R_ARCH")
Sys.getenv("JAVA_HOME")
install.packages("rJava")
library(rJava)
R.version()
R.Version()
library(NWCTrends)
create_reports()
library(NWCTrends)
?load
load("C:/Users/Eli.Holmes/Dropbox/__MyFiles Archive/Science Support/Trend Reports Package/inst/doc/fits_file.RData")
rm(aic.table)
rm(best.model)
rm(fits)
library(NWCTrends)
create_reports()
?file.choose
create_reports(inputfile=file.choose())
aa=file.choose()
aa
type(aa)
class(aa)
file.type
?file.type
?mime
?mime.type
??type
mime::guess_type(aa)
mime::guess_type("a.RData")
str_split(aa,[.])
str_split(aa,"[.]")
inputfile=aa
str_split(inputfile,"[.]")[[1]]
filetype=str_split(inputfile,"[.]")[[1]]
filetype=filetype[length(filetype)]
filetype
?load
all(c("a","b","c")%in%c("a","b"))
all(c("a","b","c")%in%c("a","b","c"))
all(c("a","b","c")%in%c("a","b","c","v"))
library(NWCTrends)
create_reports()
load("C:/Users/Eli.Holmes/Dropbox/__MyFiles Archive/Science Support/Trend Reports Package/inst/doc/fits_file.RData")
rm(fits)
rm(datalist)
rm(aic.table)
rm(best.model)
library(NWCTrends)
create_reports()
library(NWCTrends)
create_reports()
library(NWCTrends)
create_reports()
library(NWCTrends)
create_reports()
library(NWCTrends)
create_reports()
library(NWCTrends)
create_reports()
warnings()
library(NWCTrends)
create_reports()
outputfile
dir()
file.rename("inst/doc/esu_report.pdf", outputfile)
outnames=paste(figdir, str_replace_all(esuname,"/","-"),"-",
c("summary_fig.pdf","fracwild_fig.pdf","main_fig.pdf","productivity_fig.pdf"), sep="")
outnames
innames = paste(texdir, c("summary_fig-1.pdf","fracwild_fig-1.pdf","main_fig-1.pdf","productivity_fig-1.pdf"),sep="")
innames
tabnames=c("trend_15_table", "geomean_wild_table", "geomean_total_table", "fracwild_table")
tabinnames=paste(texdir,"wrapper_", tabnames, ".tex", sep="")
taboutnames.tmp=paste(figdir,"wrapper_", tabnames, ".pdf", sep="")
taboutnames=paste(figdir,str_replace_all(esuname,"/","-"),"-",
tabnames, ".pdf", sep="")
taboutnames
for(i in 1:4){
file.rename(innames[i], outnames[i])
texi2pdf(tabinnames[i], clean=TRUE)
file.rename(taboutnames.tmp[i], taboutnames[i])
}
library(NWCTrends)
create_reports()
library(NWCTrends)
create_reports()
?render
?texi2pdf
library(NWCTrends)
create_reports()
warnings()
library(NWCTrends)
create_reports()
?file.open
??file
?file.path
?file.show
file.path(R.home("doc")
)
file.path(package="NWCTrends")
file.path(package="NWCTrends","doc")
file.show(file.path(package="NWCTrends","doc"),"Methods.pdf")
file.show(file.path(package="NWCTrends","doc","Methods.pdf"))
?ShowDoc
??ShowDoc
RShowDoc("Methods",package="NWCTrends")
library(NWCTrends)
RShowDoc("Methods",package="NWCTrends")
library(NWCTrends)
rm(aa)
rm(filetype)
rm(inputfile)
library(NWCTrends)
install.packages("shiny")
library(NWCTrends)
library(NWCTrends)
NWCTrends_report()
library(NWCTrends)
NWCTrends_report()
library(NWCTrends)
NWCTrends_report()
library(NWCTrends)
NWCTrends_report()
library(NWCTrends)
?choose
?input
??read.line
??input
NWCTrends_report()
names(fits)
cat("Choose ESU to plot:\n")
readline(paste(1:length(fits),". ",names(fits),"\n")
)
paste(1:3,". ",c("a","b","c"),"\n")
cat(paste(1:3,". ",c("a","b","c"),"\n"))
readline(paste(1:3,". ",c("a","b","c"),"\n"))
readline(paste(1:length(fits),". ",names(fits),collapse="\n"))
readline( paste(1:3,". ",c("a","b","c"),collapse="\n ") )
readline("z\n",paste(1:3,". ",c("a","b","c"),collapse="\n ") )
readline(c("z\n",paste(1:3,". ",c("a","b","c"),collapse="\n ")))
readline(paste("z\n",paste(1:3,". ",c("a","b","c"),collapse="\n ")))
readline(paste("Choose the ESU num. or type 'all'\n",paste(1:3,". ",c("a","b","c"),collapse="\n ")))
aa=list(a=1,b=2,c=3,d=4)
aa[[c(1,4)]]
aa[[1]]
aa[c(1,4)]
library(NWCTrends)
NWCTrend_report()
NWCTrends_report()
library(NWCTrends)
NWCTrends_report()
names(fits)
letters()
letters
choose.esu=function(esu.names){
done=FALSE
while(!done){
nesus=length(esu.names)
esu.choice=readline(
paste("Choose the ESU number: \n 0. All ESUs\n ",
paste(1:nesus, ". ", esu.names, collapse="\n ", sep="")))
esu.choice=as.numeric(esu.choice)
if(esu.choice%in%(0:nesus)){
if(esu.choice==0) esu.choice=1:nesus
done=TRUE
}
}
return(esu.choice)
}
esu.choice(letters)
choose.esu(letters)
library(NWCTrends)
NWCTrends_report()
esu.names
esu.names
paste("Choose the ESU number: \n 0. All ESUs\n",
paste(1:nesus, ". ", esu.names, collapse="\n ", sep=""))
library(NWCTrends)
NWCTrends_report()
paste("Choose the ESU number: \n 0. All ESUs\n",
paste(1:nesus, ". ", esu.names, collapse = "\n ",
sep = ""))
nesus = length(esu.names)
nesus
paste("Choose the ESU number: \n 0. All ESUs\n",
paste(1:nesus, ". ", esu.names, collapse = "\n ",
sep = ""))
?readline
aa=readline("test")
aa
eval(paste("c(",aa,")")
)
evaluate(paste("c(",aa,")"))
?eval
get("c(1,2)")
eval(expression("c(1,2)"))
str_split(aa,",")
as.numeric(str_split(aa,","))
as.numeric(str_split(aa,",")[[1]])
as.numeric(str_split("3",",")[[1]])
c(1,3)%in%1:10
all(c(1,3)%in%1:10)
all(c(1,NA)%in%1:10)
library(NWCTrends)
NWCTrends_report()
?is.identical
?isEqual
?is.equal
?is.Equal
isEqual
is.Equal
??is.equal
??equal
library(NWCTrends)
NWCTrends_report()
library(NWCTrends)
NWCTrends_report()
library(NWCTrends)
NWCTrends_report()
library(NWCTrends)
NWCTrends_report()
NWCTrends_report(output.type="html")
library(NWCTrends)
NWCTrends_report(output.type="html")
NWCTrends_report()
library(NWCTrends)
library(NWCTrends)
NWCTrends_report(output.type="html")
library(NWCTrends)
NWCTrends_report(output.type="html")
library(NWCTrends)
library(NWCTrends)
library(NWCTrends)
NWCTrends_report(output.type="html")
library(NWCTrends)
NWCTrends_report(output.type="html")
library(NWCTrends)
library(NWCTrends)
NWCTrends_report(output.type="html")
D=diag(c(2,1,1))
P=matrix(c(1,2,0,3,1,2,1,-1,1),3,3)
P
P=matrix(c(1,2,0,3,1,2,1,-1,1),3,3,byrow=TRUE)
P
A=P%*%D%*%solve(P)
A
eigen(A)
A=solve(P)%*%D%*%P
eigen(A)
P=matrix(c(1,2,0,3,1,2,1,-1,1),3,3,byrow=TRUE)
P
D
A=solve(P)%*%D%*%P
A
eigen(A)
?eigen
?svn
?diagonalize
A=P%*%D%*%solve(P)
A
eigen(A)
P
aa=eigen(A)
aa$vectors/.3015113
P=matrix(c(1,2,0,3,1,2,1,-1,1),3,3,byrow=TRUE)
P
A=P%*%D%*%solve(P)
A
P=matrix(c(1,0,2,3,2,1,1,1,-1),3,3,byrow=TRUE)
P
A=P%*%D%*%solve(P)
A
eigen(A)
aa=eigen(A)$vectors
aa[,2]
aa[,2]-.2382557
(aa[,2]-.2382557)/.04720413
(aa[,2]/.2382557)
A
p
p=eigen(A)$vectors
d
d=diag(eigen(A)$values
)
d
p
p %*% d %*% solve(p)
A
A=matrix(c(1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1),4,4,byrow=TRUE)
A
eigen(A)
d=diag(eigen(A)$values)
p=eigen(A)$vectors
p %*% d %*% solve(p) #should be A is A is diagonalizable
solve(p)
p
p
P=matrix(c(1,2,0,3,1,2,1,-1,1),3,3,byrow=TRUE)
D=diag(c(2,1,1))
A=P%*%D%*%solve(P)
eigen(A)
.2525898/2
alpha=.1262949
solve(matrix(c(2,1,0,2),2,2))
P[1:2,2,drop=FALSE]%*%solve(matrix(c(2,1,0,2),2,2))
P[1:2,2,drop=FALSE]
solve(matrix(c(2,1,0,2),2,2))
?eigen
solve(matrix(c(2,1,0,2),2,2))%*%P[1:2,2,drop=FALSE]
P
p=eigen(A)$vectors
solve(matrix(c(2,1,0,2),2,2))%*%p[1:2,2,drop=FALSE]
ab=solve(matrix(c(2,1,0,2),2,2))%*%p[1:2,2,drop=FALSE]
P[,2:3]%*%ab
p
ab
ab=solve(matrix(c(2,1,0,2),2,2))%*%p[1:2,3,drop=FALSE]
ab
P[,2:3]%*%ab
p
library(devtools)
devtools::install_github("nwfsc-timeseries/NWCTrends")
library(NWCTrends)
?NWCTrends
NWCTrends_report()
NWCTrends_report()
?RShowDoc
RShowDoc(*, package="NWCTrends")
RShowDoc("*", package="NWCTrends")
RShowDoc("", package="NWCTrends")
?system.file
system.file(package="NWCTrends")
system.file("doc",package="NWCTrends")
system.file("doc","demodata",package="NWCTrends")
fpath <- system.file("doc","demodata",package="NWCTrends")
dir(fpath)
fpath
file.choose(fpath)
dir("/Library/Frameworks/R.framework/Versions/3.5/Resources/library/NWCTrends")
file.choose(/Library/Frameworks/R.framework/Versions/3.5/Resources/library/NWCTrends")
file.choose("/Library/Frameworks/R.framework/Versions/3.5/Resources/library/NWCTrends")
file.choose("/Library/Frameworks/R.framework/Versions/3.5/Resources")
?file.choose
?NWCTrends
dir(fpath)
RShowDoc("doc/demodata/Lower_Columbia_River_Chinook.csv")
RShowDoc("doc/demodata/Lower_Columbia_River_Chinook.csv", package="NWCTrends")
?file.copy
?file.copy
?dir.create
fpath <- system.file("doc","demodata",package="NWCTrends")
dir()
file.copy(fpath, "demo")
file.copy(fpath, "demo")
file.copy(fpath, "demo",recursive=TRUE)
file.copy(fpath, ".",recursive=TRUE)
getwd()
